// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/AppUpdate.proto
package com.mdx.framework.server.api.base;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class Msg_Update extends Message {

	private static final long serialVersionUID = 1L;

	public static final Integer DEFAULT_STATE = 0;
	public static final Integer DEFAULT_FLAG = 0;
	public static final String DEFAULT_URL = "";
	public static final String DEFAULT_CONTENT = "";
	public static final List<Msg_Key> DEFAULT_KEYS = immutableCopyOf(null);
	public static final Integer DEFAULT_SOURCEUPDATE = 0;
	public static final Integer DEFAULT_SOURCE = 0;

	@ProtoField(tag = 1, type = INT32, label = REQUIRED)
	public Integer state = DEFAULT_STATE;

	/**
	 * 是否有更新 0:无 1:有
	 */
	@ProtoField(tag = 2, type = INT32)
	public Integer flag = DEFAULT_FLAG;

	/**
	 * 是否强制更新 0:否 1:是
	 */
	@ProtoField(tag = 3, type = STRING)
	public String url;

	/**
	 * 下载路径
	 */
	@ProtoField(tag = 4, type = STRING)
	public String content;

	/**
	 * 内容
	 */
	@ProtoField(tag = 5, label = REPEATED, messageType = Msg_Key.class)
	public List<Msg_Key> keys = immutableCopyOf(null);

	/**
	 * 参数列表
	 */
	@ProtoField(tag = 6, type = INT32)
	public Integer sourceUPdate = DEFAULT_SOURCEUPDATE;

	/**
	 * 版本强制更新
	 */
	@ProtoField(tag = 7, type = INT32)
	public Integer source = DEFAULT_SOURCE;

	public Msg_Update(Integer state, Integer flag, String url, String content, List<Msg_Key> keys, Integer sourceUPdate, Integer source) {
		this.state = state == null ? this.state : state;
		this.flag = flag == null ? this.flag : flag;
		this.url = url == null ? this.url : url;
		this.content = content == null ? this.content : content;
		this.keys = immutableCopyOf(keys);
		this.sourceUPdate = sourceUPdate == null ? this.sourceUPdate : sourceUPdate;
		this.source = source == null ? this.source : source;
	}

	public Msg_Update() {
	}

	private Msg_Update(Builder builder) {
		this(builder.state, builder.flag, builder.url, builder.content, builder.keys, builder.sourceUPdate, builder.source);
		setBuilder(builder);
	}

	@Override
	public boolean equals(Object other) {
		if (other == this)
			return true;
		if (!(other instanceof Msg_Update))
			return false;
		Msg_Update o = (Msg_Update) other;
		return equals(state, o.state) && equals(flag, o.flag) && equals(url, o.url) && equals(content, o.content) && equals(keys, o.keys) && equals(sourceUPdate, o.sourceUPdate)
				&& equals(source, o.source);
	}

	@Override
	public int hashCode() {
		int result = hashCode;
		if (result == 0) {
			result = state != null ? state.hashCode() : 0;
			result = result * 37 + (flag != null ? flag.hashCode() : 0);
			result = result * 37 + (url != null ? url.hashCode() : 0);
			result = result * 37 + (content != null ? content.hashCode() : 0);
			result = result * 37 + (keys != null ? keys.hashCode() : 1);
			result = result * 37 + (sourceUPdate != null ? sourceUPdate.hashCode() : 0);
			result = result * 37 + (source != null ? source.hashCode() : 0);
			hashCode = result;
		}
		return result;
	}

	public static final class Builder extends Message.Builder<Msg_Update> {
		private static final long serialVersionUID = 1L;

		public Integer state;
		public Integer flag;
		public String url;
		public String content;
		public List<Msg_Key> keys;
		public Integer sourceUPdate;
		public Integer source;

		public Builder() {
		}

		public Builder(Msg_Update message) {
			super(message);
			if (message == null)
				return;
			this.state = message.state;
			this.flag = message.flag;
			this.url = message.url;
			this.content = message.content;
			this.keys = copyOf(message.keys);
			this.sourceUPdate = message.sourceUPdate;
			this.source = message.source;
		}

		@Override
		public Msg_Update build() {
			checkRequiredFields();
			return new Msg_Update(this);
		}
	}
}
