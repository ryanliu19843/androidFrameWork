// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/tempfile.proto
package com.mdx.framework.server.api.base;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class Msg_TempFile extends Message {

  private static final long serialVersionUID = 1L;

  public static final String DEFAULT_FILENAME = "";
  public static final Long DEFAULT_FILESIZE = 0L;
  public static final String DEFAULT_FILEPATH = "";
  public static final Long DEFAULT_CREATETIME = 0L;
  public static final Long DEFAULT_TEMPTIME = 0L;

  @ProtoField(tag = 1, type = STRING, label = REQUIRED)
  public String filename;

  @ProtoField(tag = 2, type = INT64)
  public Long filesize = DEFAULT_FILESIZE;

  @ProtoField(tag = 3, type = STRING)
  public String filepath;

  @ProtoField(tag = 4, type = INT64)
  public Long createtime = DEFAULT_CREATETIME;

  @ProtoField(tag = 5, type = INT64)
  public Long tempTime = DEFAULT_TEMPTIME;

  public Msg_TempFile(String filename, Long filesize, String filepath, Long createtime, Long tempTime) {
    this.filename = filename==null?this.filename:filename;
    this.filesize = filesize==null?this.filesize:filesize;
    this.filepath = filepath==null?this.filepath:filepath;
    this.createtime = createtime==null?this.createtime:createtime;
    this.tempTime = tempTime==null?this.tempTime:tempTime;
  }

  public Msg_TempFile() {
  }

  private Msg_TempFile(Builder builder) {
    this(builder.filename, builder.filesize, builder.filepath, builder.createtime, builder.tempTime);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Msg_TempFile)) return false;
    Msg_TempFile o = (Msg_TempFile) other;
    return equals(filename, o.filename)
        && equals(filesize, o.filesize)
        && equals(filepath, o.filepath)
        && equals(createtime, o.createtime)
        && equals(tempTime, o.tempTime);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = filename != null ? filename.hashCode() : 0;
      result = result * 37 + (filesize != null ? filesize.hashCode() : 0);
      result = result * 37 + (filepath != null ? filepath.hashCode() : 0);
      result = result * 37 + (createtime != null ? createtime.hashCode() : 0);
      result = result * 37 + (tempTime != null ? tempTime.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Msg_TempFile> {
    private static final long serialVersionUID = 1L;


    public String filename;
    public Long filesize;
    public String filepath;
    public Long createtime;
    public Long tempTime;

    public Builder() {
    }

    public Builder(Msg_TempFile message) {
      super(message);
      if (message == null) return;
      this.filename = message.filename;
      this.filesize = message.filesize;
      this.filepath = message.filepath;
      this.createtime = message.createtime;
      this.tempTime = message.tempTime;
    }

    @Override
    public Msg_TempFile build() {
      checkRequiredFields();
      return new Msg_TempFile(this);
    }
  }
}
